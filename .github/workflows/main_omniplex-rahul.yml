name: Build and deploy Node.js app to Azure Web App - omniplex-rahul

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'  # ✅ Enable npm caching


      - name: Install all dependencies (including dev)
        run: npm ci  # ← Changed: Install ALL dependencies for build

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Create a clean deployment structure
          mkdir deployment-package
          
          # Use Next.js standalone output
          cp -r .next/standalone/* deployment-package/
          
          # Create .next directory and copy static files
          mkdir -p deployment-package/.next
          cp -r .next/static deployment-package/.next/static
          
          # Copy public directory
          cp -r public deployment-package/public
          
          # Create a proper package.json for standalone deployment
          cat > deployment-package/package.json << 'EOF'
          {
            "name": "omniplex",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "node server.js"
            },
            "engines": {
              "node": "18.x"
            }
          }
          EOF
          
          # Create a startup script for Azure
          cat > deployment-package/startup.sh << 'EOF'
          #!/bin/bash
          export PORT=${PORT:-8080}
          export NODE_ENV=production
          cd /home/site/wwwroot
          exec node server.js
          EOF
          
          # Make scripts executable
          chmod +x deployment-package/server.js
          chmod +x deployment-package/startup.sh
          
          cd deployment-package
          
          # Use tar instead of zip to preserve file permissions and symlinks
          tar -czf ../release.tar.gz .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.tar.gz
          retention-days: 1  # ✅ Cleanup artifacts

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: tar -xzf release.tar.gz
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EC4E676092A64BD4BBF5A938EB243A3A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_75A18EF9AB404E82BB84BC240C604A3F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C930389CCD104DE480949012285039CD }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'omniplex-rahul'
          slot-name: 'Production'
          package: .
          startup-command: 'bash startup.sh'
